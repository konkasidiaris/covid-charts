{"version":3,"sources":["components/SummaryTable/SummaryTable.js","components/charts/HistoryChartPerCountry.js","App.js","serviceWorker.js","index.js"],"names":["SummaryTable","useState","loading","setLoading","countriesStats","setCountriesStats","tableIcons","Filter","forwardRef","props","ref","DetailPanel","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","a","fetch","json","then","countries","useEffect","fetchData","className","icons","columns","title","field","searchable","sorting","render","rowData","alt","country","src","countryInfo","flag","style","maxWidth","data","detailPanel","tooltip","cases","deaths","recovered","active","critical","casesPerOneMillion","deathsPerOneMillion","onRowClick","event","togglePanel","HistoryChartPerCountry","historicalData","setHistoricalData","setCountry","countryList","setCountryList","setData","stats","temp","Set","Object","entries","value","add","Array","from","sort","changePlotValues","obj","timeline","data1","data2","data3","key","push","date","formatDate","i","length","Grid","item","container","direction","alignContent","alignItems","justify","xs","TextField","select","id","label","onChange","target","filter","helperText","variant","map","option","MenuItem","width","height","type","dataKey","stroke","strokeDasharray","offset","position","angle","isAnimationActive","Date","toISOString","substring","App","spacing","padding","Typography","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a4ec385.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { forwardRef } from \"react\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport MaterialTable from \"material-table\";\r\nimport \"./SummaryTable.css\";\r\n\r\nexport default function SummaryTable() {\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [countriesStats, setCountriesStats] = useState([]);\r\n  const tableIcons = {\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => (\r\n      <ChevronLeft {...props} ref={ref} />\r\n    )),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => (\r\n      <ArrowDownward {...props} ref={ref} />\r\n    ))\r\n  };\r\n\r\n  async function fetchData() {\r\n    const response = await fetch(\"https://corona.lmao.ninja/countries\");\r\n    response\r\n      .json()\r\n      .then(countries => setCountriesStats(countries))\r\n      .then(setLoading(false));\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return loading ? (\r\n    <h1>loading...</h1>\r\n  ) : (\r\n    <div>\r\n      <div className=\"regular-table\">\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          columns={[\r\n            {\r\n              title: \"\",\r\n              field: \"countryInfo.flag\",\r\n              searchable: false,\r\n              sorting: false,\r\n              render: rowData => (\r\n                <img\r\n                  alt={rowData.country + `'s flag`}\r\n                  src={rowData.countryInfo.flag}\r\n                  style={{ maxWidth: 25 }}\r\n                />\r\n              )\r\n            },\r\n            { title: \"Country\", field: \"country\" },\r\n            { title: \"Cases\", field: \"cases\" },\r\n            { title: \"Deaths\", field: \"deaths\" },\r\n            { title: \"Recovered\", field: \"recovered\" },\r\n            { title: \"Active\", field: \"active\" },\r\n            { title: \"Critical\", field: \"critical\" },\r\n            { title: \"Cases/million\", field: \"casesPerOneMillion\" },\r\n            { title: \"Deaths/million\", field: \"deathsPerOneMillion\" }\r\n          ]}\r\n          data={countriesStats}\r\n          title=\"COVID-19 data by country\"\r\n        />\r\n      </div>\r\n      <div className=\"cell-phone-table\">\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          columns={[\r\n            { title: \"Country\", field: \"country\" },\r\n            { title: \"Cases\", field: \"cases\" },\r\n            { title: \"Deaths\", field: \"deaths\" }\r\n          ]}\r\n          data={countriesStats}\r\n          title=\"COVID-19\"\r\n          detailPanel={[\r\n            {\r\n              tooltip: \"tap me for more information\",\r\n              render: rowData => {\r\n                return (\r\n                  <div className=\"cell-phone-table-panel\">\r\n                    <p>\r\n                      <img\r\n                        alt={rowData.country + `'s flag`}\r\n                        src={rowData.countryInfo.flag}\r\n                        style={{ maxWidth: 40 }}\r\n                      />\r\n                    </p>\r\n                    <p>Country:<strong>{rowData.country}</strong></p>\r\n                    <p>Cases:<strong>{rowData.cases}</strong></p>\r\n                    <p>Deaths:<strong>{rowData.deaths}</strong></p>\r\n                    <p>Recovered:<strong>{rowData.recovered}</strong></p>\r\n                    <p>Active:<strong>{rowData.active}</strong></p>\r\n                    <p>Critical:<strong>{rowData.critical}</strong></p>\r\n                    <p>Cases/million:<strong>{rowData.casesPerOneMillion}</strong></p>\r\n                    <p>Deaths/million:<strong>{rowData.deathsPerOneMillion}</strong></p>\r\n                  </div>\r\n                );\r\n                //this is actually dangerous, library does not\r\n                //provide a better way to do detail panels\r\n              }\r\n            }\r\n          ]}\r\n          onRowClick={(event, rowData, togglePanel) => togglePanel()}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend\r\n} from \"recharts\";\r\nimport { TextField, MenuItem, Grid } from \"@material-ui/core\";\r\n\r\nexport default function HistoryChartPerCountry() {\r\n  const [historicalData, setHistoricalData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [country, setCountry] = useState(\"\");\r\n  const [countryList, setCountryList] = useState([]);\r\n  const [data,setData] = useState([]);\r\n\r\n  const countries = stats => {\r\n    let temp = new Set();\r\n    // eslint-disable-next-line\r\n    for (let [key, value] of Object.entries(stats)) {\r\n      temp.add(value.country);\r\n    }\r\n    return Array.from(temp).sort();\r\n  };\r\n\r\n  async function fetchData() {\r\n    const response = await fetch(`https://corona.lmao.ninja/v2/historical`);\r\n    response.json().then(data => {\r\n      setHistoricalData(data);\r\n      setCountryList(countries(data));\r\n    })\r\n    .then(setLoading(false));\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleChange = event => {\r\n    setCountry(event.target.value);\r\n    changePlotValues(\r\n      historicalData.filter(obj => obj.country === event.target.value)\r\n    );\r\n  };\r\n\r\n  const changePlotValues = obj => {\r\n    let temp = obj[0].timeline;\r\n    let data1 = [];\r\n    let data2 = [];\r\n    let data3 = [];\r\n    let data = [];\r\n\r\n    for (let [key, value] of Object.entries(temp.cases)) {\r\n      data1.push({ date: formatDate(key), cases: value });\r\n    }\r\n    for (let [key, value] of Object.entries(temp.deaths)) {\r\n      data2.push({ date: formatDate(key), deaths: value });\r\n    }\r\n    for (let [key, value] of Object.entries(temp.recovered)) {\r\n      data3.push({ date: formatDate(key), recovered: value });\r\n    }\r\n    for (let i = 0; i < data1.length; i++) {\r\n      data.push({ ...data2[i], ...data1[i], ...data3[i] });\r\n    }\r\n    setData(data);\r\n  };\r\n\r\n  return loading ? (\r\n    <h1>Loading...</h1>\r\n  ) : (\r\n    <Grid\r\n      item\r\n      container\r\n      direction=\"column\"\r\n      alignContent=\"center\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      xs\r\n    >\r\n      <TextField\r\n        select\r\n        id=\"outlined-basic\"\r\n        label=\"Select Country\"\r\n        value={country}\r\n        onChange={handleChange}\r\n        helperText=\"select whose country's history stats you want to see\"\r\n        variant=\"outlined\"\r\n      >\r\n        {countryList.map(option => (\r\n          <MenuItem key={option} value={option}>\r\n            {option}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n      <LineChart width={600} height={300} data={data}>\r\n        <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#8884d8\" />\r\n        <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#82ca9d\" />\r\n        <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#82dadd\" />\r\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n        <XAxis\r\n          dataKey=\"date\"\r\n          label={{ value: \"days\", offset: -2, position: \"insideBottom\" }}\r\n        />\r\n        <YAxis\r\n          label={{\r\n            value: \"total cases\",\r\n            angle: -90,\r\n            position: \"insideLeft\"\r\n          }}\r\n        />\r\n        <Tooltip isAnimationActive={false} />\r\n        <Legend />\r\n      </LineChart>\r\n    </Grid>\r\n  );\r\n\r\n  function formatDate(date) {\r\n    return new Date(date).toISOString().substring(0, 10);\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport SummaryTable from \"./components/SummaryTable/SummaryTable\";\nimport HistoryChartPerCountry from \"./components/charts/HistoryChartPerCountry\";\n\nexport default function App() {\n  return( \n    <Grid\n      container\n      direction=\"column\"\n      alignContent=\"center\"\n      alignItems=\"center\"\n      justify=\"center\"\n      spacing={4}\n      style={{ padding: 16 }}\n    >\n      <Typography variant=\"h3\" component=\"h3\">\n        Covid charts & statistics\n      </Typography>\n      <HistoryChartPerCountry />\n      <SummaryTable />\n    </Grid>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
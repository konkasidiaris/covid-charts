{"version":3,"sources":["components/SummaryTable/SummaryTable.js","components/charts/HistoryChartPerCountry.js","App.js","serviceWorker.js","index.js"],"names":["tableIcons","Filter","forwardRef","props","ref","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","SummaryTable","countriesData","icons","columns","title","field","searchable","sorting","render","rowData","alt","country","src","countryInfo","flag","style","maxWidth","data","HistoryChartPerCountry","useState","setCountry","cases","setCases","deaths","setDeaths","isLoading","setIsLoading","useEffect","fetch","then","response","json","timeline","catch","console","log","countries","data1","data2","Object","entries","key","value","push","date","formatDate","dailyCases","dailyDeaths","i","length","TextField","select","id","label","onChange","event","target","helperText","variant","map","option","MenuItem","width","height","margin","top","right","bottom","left","type","dataKey","stroke","strokeDasharray","offset","position","angle","Date","toISOString","substring","App","state","countriesStats","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5e8e9db3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { forwardRef } from \"react\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nconst tableIcons = {\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />)\r\n};\r\n\r\nexport default function SummaryTable({ countriesData }) {\r\n  return (\r\n    <MaterialTable\r\n      icons={tableIcons}\r\n      columns={[\r\n        {\r\n          title: \"\",\r\n          field: \"countryInfo.flag\",\r\n          searchable: false,\r\n          sorting: false,\r\n          render: rowData => (\r\n            <img\r\n              alt={rowData.country + `'s flag`}\r\n              src={rowData.countryInfo.flag}\r\n              style={{ maxWidth: 25 }}\r\n            />\r\n          )\r\n        },\r\n        { title: \"Country\", field: \"country\" },\r\n        { title: \"Cases\", field: \"cases\" },\r\n        { title: \"Deaths\", field: \"deaths\" },\r\n        { title: \"Recovered\", field: \"recovered\" },\r\n        { title: \"Active\", field: \"active\" },\r\n        { title: \"Critical\", field: \"critical\" },\r\n        { title: \"Cases/million\", field: \"casesPerOneMillion\" },\r\n        { title: \"Deaths/million\", field: \"deathsPerOneMillion\" }\r\n      ]}\r\n      data={countriesData}\r\n      title=\"COVID-19 data by country\"\r\n    />\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip\r\n} from \"recharts\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\n\r\nexport default function HistoryChartPerCountry({ props }) {\r\n  const [country, setCountry] = useState(\"greece\");\r\n  const [cases, setCases] = useState([]);\r\n  const [deaths, setDeaths] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(`https://corona.lmao.ninja/v2/historical/${country}`)\r\n      .then(response => response.json())\r\n      .then(timeline => {\r\n        setCases(timeline.timeline.cases);\r\n        setDeaths(timeline.timeline.deaths);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(console.log);\r\n  }, [country]);\r\n\r\n  const countries = props;\r\n  const handleChange = event => {\r\n    setCountry(event.target.value);\r\n  };\r\n  let data = [];\r\n  let data1 = [];\r\n  let data2 = [];\r\n  for (let [key, value] of Object.entries(cases)) {\r\n    data1.push({ date: formatDate(key), dailyCases: value });\r\n  }\r\n  for (let [key, value] of Object.entries(deaths)) {\r\n    data2.push({ date: formatDate(key), dailyDeaths: value });\r\n  }\r\n  for (let i = 0; i < data1.length; i++) {\r\n    data.push({ ...data2[i], ...data1[i] });\r\n  }\r\n  return isLoading ? (\r\n    <h1>Loading...</h1>\r\n  ) : (\r\n    <div>\r\n      <TextField\r\n        select\r\n        id=\"outlined-basic\"\r\n        label=\"Select Country\"\r\n        value={country}\r\n        onChange={handleChange}\r\n        helperText=\"select whose country's history stats you want to see\"\r\n        variant=\"outlined\"\r\n      >\r\n        {countries.map(option => (\r\n          <MenuItem key={option} value={option}>\r\n            {option}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n      <LineChart\r\n        width={600}\r\n        height={300}\r\n        data={data}\r\n        margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\r\n      >\r\n        <Line type=\"monotone\" dataKey=\"dailyDeaths\" stroke=\"#8884d8\" />\r\n        <Line type=\"monotone\" dataKey=\"dailyCases\" stroke=\"#82ca9d\" />\r\n        <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n        <XAxis\r\n          dataKey=\"date\"\r\n          label={{ value: \"days\", offset: 0, position: \"insideBottom\" }}\r\n        />\r\n        <YAxis\r\n          label={{\r\n            value: \"number of cases/deaths\",\r\n            angle: -90,\r\n            position: \"insideLeft\"\r\n          }}\r\n        />\r\n        <Tooltip />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n\r\n  function formatDate(date) {\r\n    return new Date(date).toISOString().substring(0, 10);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SummaryTable from \"./components/SummaryTable/SummaryTable\";\nimport HistoryChartPerCountry from \"./components/charts/HistoryChartPerCountry\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      countriesStats: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://corona.lmao.ninja/countries\")\n      .then(response => response.json())\n      .then(countries => this.setState({ countriesStats: countries }));\n  }\n\n  render() {\n    const { countriesStats } = this.state;\n    let countries=[];\n    // eslint-disable-next-line\n    for (let [value] of Object.entries(countriesStats)) {\n      countries.push(value.country);\n    }\n    return !countriesStats.length ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div>\n        <HistoryChartPerCountry props={countries}/>\n        <SummaryTable countriesData={countriesStats} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}